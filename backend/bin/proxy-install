#!/usr/bin/env ruby

require 'yaml'
require 'erb'
require 'fileutils'

if ARGV.empty?
  STDERR.puts "usage: #{$0} environment"
  exit 1
end

env = ARGV.shift

def install(dst)
  src = File.expand_path("../root#{dst}", __dir__)
  FileUtils.cp(src, dst)
end

if env == "production"
  system("apt-get install -y unattended-upgrades")

  install("/etc/apt/apt.conf.d/20auto-upgrades")
  install("/etc/apt/apt.conf.d/50unattended-upgrades")

  system("service unattended-upgrades restart")
end

config_file = File.expand_path("../../config.#{env}.yml", __dir__)
config = YAML.load(File.read(config_file))


nginx_erb_path = File.expand_path("../root/etc/nginx/nginx.conf.erb", __dir__)
nginx_erb = ERB.new(File.read(nginx_erb_path), nil, "<>")

puts "Writing /etc/nginx/nginx.conf"

File.open("/etc/nginx/nginx.conf", "w") do |f|
  global_fd_limit = 65536
  num_workers = `grep processor /proc/cpuinfo | wc -l`.chomp.to_i
  worker_fd_limit = global_fd_limit / num_workers

  f.write nginx_erb.result(binding)
end


if config["env"].key?("PROXY_SYSLOG_DRAIN") && config["env"].key?("PROXY_SYSLOG_ROOT_CERTS") && config["env"].key?("PROXY_SYSLOG_PERMITTED_PEER")
  rsyslog_erb_path = File.expand_path("../root/etc/rsyslog.d/51-proxy.conf.erb", __dir__)
  rsyslog_erb = ERB.new(File.read(rsyslog_erb_path), nil, "<>")

  root_certs = config["env"]["PROXY_SYSLOG_ROOT_CERTS"]

  system("apt-get install -y rsyslog-gnutls")

  puts "Downloading #{root_certs}..."
  system("curl --silent -o /etc/rsyslog-root-certs-bundle.pem #{root_certs}")

  puts "Writing /etc/rsyslog.d/51-proxy.conf"

  File.open("/etc/rsyslog.d/51-proxy.conf", "w") do |f|
    syslog_drain = config["env"]["PROXY_SYSLOG_DRAIN"]
    permitted_peer = config["env"]["PROXY_SYSLOG_PERMITTED_PEER"]

    f.write rsyslog_erb.result(binding)
  end

  system("service rsyslog restart")
elsif config["env"].key?("PROXY_SYSLOG_DRAIN")
  puts "Warning: $PROXY_SYSLOG_DRAIN is set but either $PROXY_SYSLOG_ROOT_CERTS or $PROXY_SYSLOG_PERMITTED_PEER is not set. Logs will NOT be sent to $PROXY_SYSLOG_DRAIN."
end


systemd_erb_path = File.expand_path("../root/etc/systemd/system/proxy.service.erb", __dir__)
systemd_erb = ERB.new(File.read(systemd_erb_path), nil, "<>")

puts "Writing /etc/systemd/system/proxy.service"

File.open("/etc/systemd/system/proxy.service", "w") do |f|
  vars = config["env"]

  if env == 'production'
    home_dir = '/home/ubuntu'
  else
    home_dir = '/home/vagrant'
  end

  f.write systemd_erb.result(binding)
end

system("service proxy start")
